project-info:
  name: myProject
  version: v1
  description : Local

server:
  port: 8443
  servlet.session:
    timeout: 60m
    cookie:
      name: JSESSIONID
      http-only: true
      secure: true #(ssl 사용시 설정과 상관없이 true로 설정됨, ssl 비사용시 false로 설정할수 있으나 false 일경우 브라우저가 자체 block처리하여 사용이 불가능함)
      same-site: none #(사설 인증서의 경우 Lax 사용을 해도 브라우저가 block 처리함, 테스트를 위해 none 설정 필요)
  #사설 인증사의 경우 로컬 테스트를 위해 브라우저 설정 필요 (chrome://flags/ -> Allow invalid certificates for resources loaded from localhost. -> Enabled, 도메인은 front.localhost:8080 형태로 구성)
  ssl:
    key-store: classpath:_frameworkWebCoreResources/keystore/keystore.p12
    key-store-type: PKCS12
    key-store-password: keystore_password
  #에러전파순서 :
  #개발자가만든 ExHandler가 1순위 (여기서 처리가 안되면)
  #   --> 스프링 에러 처리 메커니즘  (특정위치에 404.html, 5xx.html 과 같이 페이지를 만들어 놓으면 에러코드에 따라 해당 페이지 호출해줌, 페이지가 없으면 기본폼(whitelabel)으로 호출됨, 에러 파일도 없고 whitelabel.enabled: false 이면 was에러 페이지로 넘김)
  #     --> WAS 에러 페이지 (스프링 내부에서 처리하지 못하면 was가 제공하는 기봄폼으로 노출)
  error: #스프링에서 제공하는 에러 기본 처리 설정 (CustomErrorController 를 구현하여 사용하는 케이스에서는 아래 /error/5xx등 의 페이지가 불려지진 않음)
    include-exception: true #exception 정보를 보여줄지
    include-stacktrace: on_param #stacktrace 를 보여줄지
    path: error #에러 처리에 대한 뷰 경로
    whitelabel.enabled: false #스프링의 기본 에러 페이지(Whitelabel Error Page)를 사용할지

LocalStorage:
  multipartFiles:
    basePath: c:/

spring:
  web:
    resources:
      static-locations: #static resource 에 대한 디폴트 경로 및 표기를 지정함(여러 모양으로 지정가능), 설정이 없다면 resource/static/xxx 를 /xxx로 접근할수 있음
        #- classpath:/resources/ #/resource/static/xxx 를 /xxx로 접근함 (디폴트 설정과 같은 내용)
        #- classpath:/static/ #/resource/static/xxx 를 /static/xxx로 접근함 (ResourceHandlerConfig 에서 처리하는 방식으로 변경)
  devtools: #코드 수정 실시간 반영
    livereload:
      enabled: true
    restart:
      enabled: true
  # config:
  #   import: #기본 프로퍼티가 아닌 추가적인 property 파일로 구성 필요시.
  #   (단점은 명확한 파일명이나 폴더를 지정할수 있지만 하위 폴더 내부의 파일은 인식하지 못함, 그래서 ConfigDirectoryLoader 만들어 사용하는 방식으로 변경 함)
  #     - optional:classpath:_projectCommonResources/extraApplicationProperties/
  #     - optional:classpath:_projectCommonResources/specificPurposeConfig/xxx.yml
  thymeleaf:
    enabled: true
    cache: false
    check-template-location: true
    #prefix: classpath:/templates/thymeleaf/ #이렇게 설정하면 로컬서버에서 실행중 실시간 수정 변경이 안되는 현상이 있음
    prefix: file:src/main/resources/templates/thymeleaf/
    suffix: .html
  # jsp로 설정할때
  # mvc:
  #  view:
  #    prefix: /WEB-INF/views/
  #    suffix: .jsp

  h2: #H2 임베드 DB 사용은 프로퍼티설정만 있음
    console:
      enabled: true #웹콘솔 사용 여부
      path: /h2-console #웹콘솔 url 경로, ex:https://localhost:8443/h2-console/

  datasource: #리플리카 구성이 아닌 단순 DS 사용
    #메모리 모드로 실행됨 (휘발성, @Entity 클레스에 대해 자동으로 TB 구성, schema.sql, data.sql 자동 실행)
    #url: jdbc:h2:mem:myDB
    #서버 모드(파일)로 실행됨(최초에 해당 위치에서 cmd로 copy con local.mv.db 를 통해 초기 DB파일 생성 필요, 저장된 DB로 이어서 실행됨)
#    driverClassName: org.h2.Driver #(디폴트)
#    url: jdbc:h2:file:./data/h2/myDB;AUTO_SERVER=TRUE
    driverClassName: net.sf.log4jdbc.sql.jdbcapi.DriverSpy #jdbc 내부 로깅용
    url: jdbc:log4jdbc:h2:file:./data/h2/myDB;AUTO_SERVER=TRUE
    username: sa
    password:

#  datasource:
#    #write, read로 리플리케이션 구조 설정
#    write:
#      #driver-class-name: com.mysql.cj.jdbc.Driver #(디폴트)
#      #jdbc-url: jdbc:mysql://localhost:3306/bookclub?serverTimezone=UTC
#      driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
#      jdbc-url: jdbc:log4jdbc:mysql://localhost:3306/bookclub?serverTimezone=UTC
#      username: root
#      password: ENC(UqwvhWEY4K9rahO7I8g39Q==)
#      pool-name: Hikari write Connection Pool
#      maximum-pool-size: 20
#      connectionTimeout: 30000
#      idleTimeout: 600000
#      maxLifetime: 1800000
#    read:
#      #driver-class-name: com.mysql.cj.jdbc.Driver #(디폴트)
#      #jdbc-url: jdbc:mysql://localhost:3307/bookclub?serverTimezone=UTC
#      driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
#      jdbc-url: jdbc:log4jdbc:mysql://localhost:3307/bookclub?serverTimezone=UTC
#      username: root
#      password: ENC(UqwvhWEY4K9rahO7I8g39Q==)
#      pool-name: Hikari read Connection Pool
#      maximum-pool-size: 20
#      connectionTimeout: 30000
#      idleTimeout: 600000
#      maxLifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: update #(create, create-drop, update, none)
  sql:
    init:
      mode: always #(always, never, embedded)
      schema-locations: classpath:_projectCommonResources/_initialDB/schema*.sql
      data-locations: classpath:_projectCommonResources/_initialDB/data*.sql

#PageInfoSupport 클레스 관련 설정
pagehelper:
  helper-dialect: mysql
  auto-dialect: true
  page-size-zero: false
  reasonable: true
  offset-as-page-num: false
  row-bounds-with-count: false
  auto-runtime-dialect: false
  close-conn: true
  default-count: true

# jasyptStringEncryptor 로 선언된 Bean을 스프링의 기본 StringEncryptor 으로 사용 하겠다는 의미
# (프로퍼티에서 값을 decryption 할때 기본으로 선언된 bean을 사용하겠다는 것이지 코드상에서 StringEncryptor 을 빈에서 가져다 써야할 결우는 Bean 이름으로 정확히 선택해야함)
jasypt:
  encryptor:
    bean: customJasyptStringEncryptor # 이 프로퍼티가 없어도 실제 jasyptStringEncryptor 이름으로 등록된 Bean이 있으면 해당 Bean이 동작함
    password: ${JASYPT_ENCRYPTOR_PASSWORD} # 일반 형식 32자 이상 권장
    #algorithm: PBEWithMD5AndDES # 보안성 낮음
    algorithm: PBEWITHHMACSHA512ANDAES_256 #보안성 높음

# jasyptStringEncryptor 으로 선언된 Bean 이 없다면 아래 설정으로 기분 StringEncryptor 을 설정할수 있다 (CustomJasyptConfig 에서 jasyptStringEncryptor 가 Bean으로 설정되면 의미가 없음)
#jasypt:
#  encryptor:
#    password: default_encryption_password_abc

aesEncryptor:
  base64SecretKey: ${AESENCRYPTOR_BASE64SECRETKEY} #Base64 형식의 43자 이상(256bit 이상, 1자 6bit)

desEncryptor:
  base64SecretKey: ${DESENCRYPTOR_BASE64SECRETKEY} #Base64 형식의 11자 이상(64bit 이상, 1자 6bit)

jwt:
  base64SecretKey: ${JWT_BASE64SECRETKEY} #Base64 형식의 86자 이상(512bit 이상, 1자 6bit)
  tokenValidityInMilliseconds: 3600000 #1h

test:
  jasyptTest:
    # 원문: "originPlainText", spec: PBEWITHHMACSHA512ANDAES_256, JASYPT_ENCRYPTOR_PASSWORD=12345678901234567890123456789012
    encValue: ENC(KvF6T1vmnpuch4OqqLci0TNRpr49EiCFYG6zkQU8FbXheNP4z7VfYgQg/yEygNqC)


