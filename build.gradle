plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.sptek'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' } // ← 이게 핵심!
}

dependencies {
	// 핵심 Starter - 모두 3.2.5에 맞춰 통일
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// MyBatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'

	// 기타 유틸 및 DB
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'commons-io:commons-io:2.11.0'
	implementation 'com.zaxxer:HikariCP:5.0.0'
	implementation 'mysql:mysql-connector-java:8.0.33'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.2'
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// Thymeleaf 추가 구성
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.0.RELEASE'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// SpringDoc
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// 암호화 및 기타
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
	implementation 'org.modelmapper:modelmapper:2.4.2'
	implementation 'org.aspectj:aspectjweaver:1.9.7'
	implementation 'org.jetbrains:annotations:24.0.1'
	implementation 'org.reflections:reflections:0.10.2'

	// HttpClient5 핵심 라이브러리
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

	// 내부 core 유틸
	implementation 'org.apache.httpcomponents.core5:httpcore5:5.2.1'

	// Lombok
	implementation 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'
	testCompileOnly 'org.projectlombok:lombok:1.18.26'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

	//페이징
	implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:1.4.6'

	// 테스트
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// 개발용 DB (선택)
	runtimeOnly 'com.h2database:h2:2.2.224'
}

//task renameStaticFilesWithTimestamp(type: Copy) {
//	from 'src/main/resources/static'
//	into 'build/resources/main/static'
//
//	include '**/*.js', '**/*.css', '**/*.png', '**/*.jpg', '**/*.jpeg', '**/*.gif'
//
//	def timestamp = System.currentTimeMillis()  // 타임스탬프 한번만 호출
//
//	rename { String fileName ->
//		// 타임스탬프를 파일명에 추가
//		return fileName.replaceFirst(~/(\.\w+)$/, "-$timestamp\$1")
//	}
//}
//
//// Execute the tasks in the correct order
//processResources.dependsOn(renameStaticFilesWithTimestamp)